from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import Group
from .models import AuthUser
import datetime
from datetime import datetime
import secrets
import string
from django.utils import timezone
import random
import logging

logger = logging.getLogger(__name__)

class CustomUserCreationForm(UserCreationForm):
    groups = forms.ModelMultipleChoiceField(
        queryset=Group.objects.all(),
        widget=forms.CheckboxSelectMultiple,
        required=True
    )

    this_year = datetime.today().year
    year_range = [x for x in range(this_year - 120, this_year + 1)]
    date_of_birth = forms.DateField(help_text="Enter date of birth", 
                                    label="Birth year: ", 
                                    widget=forms.SelectDateWidget(years=year_range))
    email = forms.EmailField()
    first_name = forms.CharField()
    last_name = forms.CharField()

    class Meta:
        model = AuthUser
        fields = ('user_id', 'email', 'first_name', 'last_name', 'date_of_birth', 'groups',)

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Generate user ID
        new_user_id = self.generate_user_id()
        self.fields['user_id'].initial = new_user_id
        # Hide the user ID field
        self.fields['user_id'].widget = forms.HiddenInput()
        # Generate and set password
        generated_password = self.generate_password()
        self.fields['password1'].initial = generated_password
        self.fields['password2'].initial = generated_password
        # Hide the password fields
        self.fields['password1'].widget = forms.HiddenInput()
        self.fields['password2'].widget = forms.HiddenInput()

    def save(self, commit=True):
        user = super().save(commit=False)
        # Set other fields
        if commit:
            user.save()
        return user

    # User ID generated by taking first and last name, current date and time, and a random number
    def generate_user_id(self):
        timestamp_str = datetime.now().strftime("%Y%m%d%H%M%S%f")[:-6]  # Milliseconds
        random_number = str(random.randint(1000, 9999))
        letters = string.ascii_lowercase
        length = 8
        str_one = ''.join(random.choice(letters) for i in range(length))
        str_two = ''.join(random.choice(letters) for i in range(length))
        new_user_id = f"UID-{str_one}_{str_two}_{timestamp_str}_{random_number}"
        logger.debug(f"Generated user_id: {new_user_id}")
        return new_user_id

    def generate_password(self):
        # Define characters to include in the password
        password_characters = string.ascii_letters + string.digits
        # Generate password of a specified length
        password_length = 12
        generated_password = ''.join(secrets.choice(password_characters) for _ in range(password_length))
        return generated_password